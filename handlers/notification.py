# CRON - (Command Run On) - –≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á
                            # –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

# –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É - apscheduler

from apscheduler.schedulers.asyncio import AsyncIOScheduler
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç AsyncIOScheduler –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ apscheduler.
# –≠—Ç–æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —Å–æ–±—ã—Ç–∏—è—Ö asyncio.

import datetime
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–¥—É–ª—å datetime, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º

from config import bot

from apscheduler.triggers.cron import CronTrigger
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç CronTrigger, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ CRON –≤—ã—Ä–∞–∂–µ–Ω–∏—é.

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
import random


users = [1014174749, ]
# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ users, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≤ —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

notification = []
# –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π




class Notification(StatesGroup):
    waiting_for_message = State()
# –°–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_message –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def send_notification():
    for user in users:
        if notification:
            message = random.choice(notification)
        else:
            message = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!'
        await bot.send_message(chat_id=user,
                               text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üîî \n"
                                    f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å! "
                                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ - {message}")
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è send_notification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞ users
# –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ notification –Ω–µ –ø—É—Å—Ç, —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–µ—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –µ–≥–æ
# –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.


async def set_scheduler():
    scheduler = AsyncIOScheduler(timezone='Asia/Bishkek')
    scheduler.add_job(send_notification,
                      CronTrigger(hour='21',
                                  minute='10',
                                  start_date=datetime.datetime.now()
                                  ),
                      )
    scheduler.start()
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è set_scheduler —Å–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á AsyncIOScheduler.
# –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–¥–∞—á–∞ send_notification –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:41 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–æ–Ω—ã Asia/Bishkek.

# CronTrigger ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π apscheduler, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞ CRON-–≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö.
# –≠—Ç–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã CronTrigger

	# ‚Ä¢	year: –ì–æ–¥, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∑–∞–¥–∞—á–∞. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω.
	# ‚Ä¢	month: –ú–µ—Å—è—Ü (1-12 –∏–ª–∏ ‚Äòjan‚Äô, ‚Äòfeb‚Äô, ‚Ä¶).
	# ‚Ä¢	day: –î–µ–Ω—å –º–µ—Å—è—Ü–∞ (1-31).
	# ‚Ä¢	week: –ù–µ–¥–µ–ª—è –≥–æ–¥–∞ (1-53).
	# ‚Ä¢	day_of_week: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6 –∏–ª–∏ ‚Äòmon‚Äô, ‚Äòtue‚Äô, ‚Ä¶).
	# ‚Ä¢	hour: –ß–∞—Å—ã (0-23).
	# ‚Ä¢	minute: –ú–∏–Ω—É—Ç—ã (0-59).
	# ‚Ä¢	second: –°–µ–∫—É–Ω–¥—ã (0-59).
	# ‚Ä¢	start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á).
	# ‚Ä¢	end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ—Å–ª–µ —ç—Ç–æ–π –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è).
	# ‚Ä¢	timezone: –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞.


async def handler_notification_command(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ')
    await Notification.waiting_for_message.set()
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handler_notification_command –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /notification.
# –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ Notification.waiting_for_message.


async def handle_notification_text(message: types.Message, state: FSMContext):
    notification_message = message.text
    notification.append(notification_message)

    await message.reply(f'–°–æ–æ–±—â–µ–Ω–∏–µ "{notification_message}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    await state.finish()
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_notification_text –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
# –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ notification, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤—ã–∑–æ–≤–æ–º state.finish().


def register_notification(dp: Dispatcher):
    dp.register_message_handler(handler_notification_command, commands=['notification'])
    dp.register_message_handler(handle_notification_text, state=Notification.waiting_for_message)